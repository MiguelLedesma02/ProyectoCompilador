INIT: init
LLA_AP: {
ID: a
DOS_PUNTOS: :
FLOAT: float
ID: x
COMA: ,
ID: c
COMA: ,
ID: r
COMA: ,
ID: z
COMA: ,
ID: f
DOS_PUNTOS: :
INT: int
ID: b
DOS_PUNTOS: :
STRING: string
LLA_CL: }
ID: a
OP_ASIG: :=
CONST_FLOAT: 99999.99
ID: a
OP_ASIG: :=
CONST_FLOAT: 99.
ID: a
OP_ASIG: :=
CONST_FLOAT: .9999
ID: b
OP_ASIG: :=
CONST_STRING: "@sdADaSjfla%dfg"
ID: b
OP_ASIG: :=
CONST_STRING: "asldk  fh sjf"
ID: x
OP_ASIG: :=
CONST_INT: 27
OP_RESTA: -
ID: c
ID: x
OP_ASIG: :=
ID: r
OP_SUMA: +
CONST_INT: 500
ID: x
OP_ASIG: :=
CONST_INT: 34
OP_PRODUCTO: *
CONST_INT: 3
ID: x
OP_ASIG: :=
ID: z
OP_COCIENTE: /
ID: f
IF: if
PAR_AP: (
ID: c
OP_MAYOR: >
ID: x
PAR_CL: )
LLA_AP: {
WRITE: write
PAR_AP: (
CONST_STRING: "c es mas grande que x"
PAR_CL: )
LLA_CL: }
ELSE: else
LLA_AP: {
WRITE: write
PAR_AP: (
CONST_STRING: "c es mas chico o igual a x"
PAR_CL: )
LLA_CL: }
ID: c
OP_ASIG: :=
CONST_INT: 4
ID: x
OP_ASIG: :=
CONST_INT: 1
WHILE: while
PAR_AP: (
ID: c
OP_MAYOR: >
ID: x
PAR_CL: )
LLA_AP: {
WRITE: write
PAR_AP: (
CONST_STRING: "c es mas grande que x"
PAR_CL: )
ID: x
OP_ASIG: :=
ID: x
OP_SUMA: +
CONST_INT: 1
LLA_CL: }
READ: read
PAR_AP: (
ID: x
PAR_CL: )
WRITE: write
PAR_AP: (
CONST_STRING: "ewr"
PAR_CL: )
ID: x
OP_ASIG: :=
CONST_INT: 1
ID: r
OP_ASIG: :=
CONST_INT: 1
ID: c
OP_ASIG: :=
CONST_INT: 2
IF: if
PAR_AP: (
ID: x
OP_MAYOR: >
ID: r
AND: AND
ID: c
OP_MAYOR: >
ID: x
PAR_CL: )
LLA_AP: {
WRITE: write
PAR_AP: (
CONST_STRING: "x es mas grande que b y c es mas grande que x"
PAR_CL: )
LLA_CL: }
IF: if
PAR_AP: (
ID: x
OP_MAYOR: >
ID: r
OR: OR
ID: c
OP_MAYOR: >
ID: x
PAR_CL: )
LLA_AP: {
WRITE: write
PAR_AP: (
CONST_STRING: "x es mas grande que r o c es mas grande que x"
PAR_CL: )
LLA_CL: }
IF: if
PAR_AP: (
NOT: NOT
ID: x
OP_MAYOR: >
ID: r
PAR_CL: )
LLA_AP: {
WRITE: write
PAR_AP: (
CONST_STRING: "x no es mas grande que r"
PAR_CL: )
LLA_CL: }
REORDER: reorder
PAR_AP: (
COR_AP: [
ID: x
OP_SUMA: +
CONST_INT: 3
COMA: ,
CONST_INT: 1
OP_SUMA: +
CONST_INT: 1
COMA: ,
CONST_INT: 9
OP_RESTA: -
ID: x
COR_CL: ]
COMA: ,
CONST_INT: 1
COMA: ,
CONST_INT: 2
PAR_CL: )
ID: x
OP_ASIG: :=
SUMFIRSTPRIMES: sumFirstPrimes
PAR_AP: (
CONST_INT: 5
PAR_CL: )
